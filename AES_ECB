Nb = 4 # number of columns in the state --> 128 bits for 4 columns
Nk = 4 # number of 32-bit words in the key
Nr = 10 # number of rounds based on Nk
block_size = 128 # size of the block
key_text = "Thisisthekeytext"
key = "".join(format(ord(c), '08b') for c in key_text) # format the key

binary_plaintext = None
bp_block_list = [] # list of binary plaintext split into blocks of bits specified by Nb

r_con = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c]
INV_SBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
]

s_box = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

# Galois field multiplication function for mix_columns
def gmul(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        high_bit_set = a & 0x80
        a <<= 1
        if high_bit_set:
            a ^= 0x11b  # AES irreducible polynomial
        a &= 0xFF
        b >>= 1
    return p

# Reverse the Cipher function back to plaintext
def ReverseCipher(matrix, Nr, key_schedule):
    # perform the XOR of the last key used in reverse
    for i in range(3, -1, -1):
        for j in range (3, -1, -1):
            matrix[i][j] = (matrix[i][j] ^ int(key_schedule[i + 40][j], 2)) & 0xff

    for round in range(Nr - 1, 0, -1):
        matrix = inv_shift_rows(matrix)
        matrix = inv_sub_bytes(matrix)
        for i in range(4):
            for j in range(4):
                matrix[i][j] ^= int(key_schedule[i + (4 * round)][j], 2)
        matrix = inv_mix_columns(matrix)

    matrix = inv_shift_rows(matrix)
    matrix = inv_sub_bytes(matrix)

    for i in range(4):
        for j in range(4):
            matrix[i][j] ^= int(key_schedule[i][j], 2)


    return matrix

    pass

# undo mix columns using galois field multiplication
def inv_mix_columns(word):
    for round in range(4):
        column = [word[0][round], word[1][round], word[2][round], word[3][round]]

        word[0][round] = gmul(0x0e, column[0]) ^ gmul(0x0b, column[1]) ^ gmul(0x0d, column[2]) ^ gmul(0x09, column[3])
        word[1][round] = gmul(0x09, column[0]) ^ gmul(0x0e, column[1]) ^ gmul(0x0b, column[2]) ^ gmul(0x0d, column[3])
        word[2][round] = gmul(0x0d, column[0]) ^ gmul(0x09, column[1]) ^ gmul(0x0e, column[2]) ^ gmul(0x0b, column[3])
        word[3][round] = gmul(0x0b, column[0]) ^ gmul(0x0d, column[1]) ^ gmul(0x09, column[2]) ^ gmul(0x0e, column[3])
    return word

# undo the substitution of bytes
def inv_sub_bytes(word):
    for i in range(4):
        for j in range(4):
            byte = word[i][j]
            word[i][j] = INV_SBOX[byte]
    return word

# undo the shifting of rows
def inv_shift_rows(state):
    # Row 0 unchanged
    # Row 1: rotate right by 1
    state[1] = state[1][-1:] + state[1][:-1]
    # Row 2: rotate right by 2
    state[2] = state[2][-2:] + state[2][:-2]
    # Row 3: rotate right by 3
    state[3] = state[3][-3:] + state[3][:-3]
    return state


# AES main cipher function
def Cipher(byte_block, Nr, key_schedule):
    # turn the byte_block into a 4x4 byte matrix
    matrix = [[] for _ in range(4)]
    for i in range(0, 4):
        for j in range(0, 4):
            current_byte_num = (i * 4) + j
            matrix[i].append(byte_block[current_byte_num])

    # perform the first XOR against the first word in the key schedule
    for i in range(0, 4):
        for j in range(0, 4):
            # Ensure key_schedule values are handled correctly (assuming they are in binary format)
            matrix[i][j] = (matrix[i][j] ^ int(key_schedule[i][j], 2)) & 0xff


    # perform Nr rounds to create the ciphertext
    for round in range(1, Nr):  # Start from round 1 to round Nr-1
        matrix = sub_bytes(matrix)
        matrix = shift_rows(matrix)
        matrix = mix_columns(matrix)

        # XOR with the round key
        for i in range(4):
            for j in range(4):
                matrix[i][j] = (matrix[i][j] ^ int(key_schedule[(round * 4) + i][j], 2)) & 0xff

    # Final round (no MixColumns)
    matrix = sub_bytes(matrix)
    matrix = shift_rows(matrix)

    # XOR with the final round key
    for i in range(4):
        for j in range(4):
            matrix[i][j] = (matrix[i][j] ^ int(key_schedule[(Nr * 4) + i][j], 2)) & 0xff

    return matrix


# mix columns using galois field multiplication
def mix_columns(word):
    for round in range(0, 4):
        column = [word[0][round],word[1][round],word[2][round],word[3][round]]

        word[0][round] = gmul(column[0], 0x02) ^ gmul(column[1], 0x03) ^ column[2] ^ column[3]
        word[1][round] = column[0] ^ gmul(column[1], 0x02) ^ gmul(column[2], 0x03) ^ column[3]
        word[2][round] = column[0] ^ column[1] ^ gmul(column[2], 0x02) ^ gmul(column[3], 0x03)
        word[3][round] = gmul(column[0], 0x03) ^ column[1] ^ column[2] ^ gmul(column[3], 0x02)

    return word

# takes a word and switches the bytes circularly
def shift_rows(word):
    for i in range(0,4):
        for j in range(0,i):
            temp = word[i][0]
            word[i][0] = word[i][1]
            word[i][1] = word[i][2]
            word[i][2] = word[i][3]
            word[i][3] = temp
    return word

# take a word and subsitute the bytes with ones from the s_box
def sub_bytes(word):
    for i in range(4):
        for j in range(4):
            word[i][j] = s_box[word[i][j]]
    return word

# takes an input 128-bit key and produces a list of keys to be used in AES cipher function
def KeyExpansion(key):

    # convert the 128-bit key into a 4x4 byte grid
    key_byte_matrix = [[] for _ in range(4)]
    for i in range(0,4):
        for j in range(0,4):
            current_byte_num = (i * 32) + (j * 8)
            key_byte_matrix[i].append(key[current_byte_num: current_byte_num + 8])

    for i in range(Nk, 44):
        new_word = key_byte_matrix[i - 1]  # Previous word

        if i % Nk == 0:
            # Perform RCon transformation every Nk words
            new_word = Perform_RCon(sub_word(RotateWord(new_word)), i // Nk)

        # XOR with word Nk positions back
        new_word = [bin(int(new_word[j], 2) ^ int(key_byte_matrix[i - Nk][j], 2))[2:].zfill(8) for j in range(4)]

        key_byte_matrix.append(new_word)

    return key_byte_matrix

def Perform_RCon(word, round_num):
    word[3] = bin(int(word[3], 2) ^ r_con[round_num])[2:].zfill(8)
    return word

# takes a word and substitutes the byte with one from the s_box
def sub_word(word):
    for i in range(0,4):
        first_four = word[i][0:4]
        last_four = word[i][4:8]

        s_box_num = int(first_four, 2) + (int(last_four, 2) * 16)
        word[i] = bin(s_box[s_box_num])[2:].zfill(8)
    return word


# takes a word matrix and moves the bytes around
def RotateWord(word):

    temp = word[0]
    word[0] = word[1]
    word[1] = word[2]
    word[2] = word[3]
    word[3] = temp

    return word

# To meet the 128 bit obligation for the block padding will need to be done on the last block
# so that it reaches 128 bits. The padding will be removed later in decryption
def PerformPadding(block_list):
    last_block = block_list[-1]
    bits_missing = block_size - len(last_block)
    bytes_missing = bits_missing // 8
    pad_byte = format(bytes_missing, '08b') # sets it to format 0b00000000

    if (bytes_missing == 0): # performed to make sure that there will always be a pad to remove
        new_pad_block = pad_byte * 16
        block_list.append(new_pad_block)
    else:
        block_list[-1] = last_block + (pad_byte) * bytes_missing

    return block_list


def remove_padding(decrypted_message):
    # Get the last byte (which indicates how much padding was added)
    padding_length = decrypted_message[-1][-1][-1]

    # Iterate backwards through the last list
    for i in range(len(decrypted_message[-1]) - 1, -1, -1):  # From last element to first
        for j in range(len(decrypted_message[-1][i]) - 1, -1, -1):  # From last subelement to first
            if decrypted_message[-1][i][j] == padding_length:
                del decrypted_message[-1][i][j]

    return decrypted_message


# takes a list of integers and converts to ascii text
def output_text(byte_list):
    for word in byte_list:
        for row in word:
            for char in row:
                print(chr(char),end="")

if __name__ == '__main__':
    plaintext = input("Enter plaintext: ")

    binary_plaintext = ''.join(format(ord(char), '08b') for char in plaintext) # change plaintext to binary

    for i in range(0, len(binary_plaintext), 128): # Split the binary into 128 bit blocks
        block = binary_plaintext[i:i + 128]  # Get a 128-bit chunk
        bp_block_list.append(block)

    bp_block_list = PerformPadding(bp_block_list)

    byte_block_list = []
    # split the binary blocks into blocks containing 8 bit bytes
    for block in bp_block_list:
        byte_block_list.append([int(block[i:i+8], 2) for i in range(0, len(block), 8)])
    for i in range(0,len(byte_block_list)):
        print(f'plain block {i}: {byte_block_list[i]}')

    expanded_key = KeyExpansion(key)

    cipher_block_list = [None] * len(byte_block_list)
    # take each block and convert it into ciphertext
    for i in range(len(byte_block_list)):
        cipher_block_list[i] = Cipher(byte_block_list[i], Nr, expanded_key)

    print()
    for i in range(0,len(cipher_block_list)):
        print(f'cipher block {i}: {cipher_block_list[i]}')
    print()

    plaintext_block_list = [None] * len(cipher_block_list)
    for i in range(len(cipher_block_list)):
        plaintext_block_list[i] = ReverseCipher(cipher_block_list[i], Nr, expanded_key)


    remove_padding(plaintext_block_list)
    for i in range(0,len(plaintext_block_list)):
        print(f'deciphered block {i}: {plaintext_block_list[i]}')
    print()
    output_text(plaintext_block_list)
